# -*- coding: utf-8 -*-
"""EnsembleModelFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JZtbhuy-UNoq9GK5Bfcs_a8EKcWkxe2b
"""

import numpy
import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.preprocessing import LabelEncoder
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, BatchNormalization, Activation
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.callbacks import EarlyStopping,Callback

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, RNN, LSTM, GRU, Bidirectional, Embedding, Dropout
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from tensorflow.keras.callbacks import EarlyStopping

X_Data=pd.read_csv("/content/drive/MyDrive/DataNeural/Features.csv")
y_data=pd.read_csv("/content/drive/MyDrive/DataNeural/Label.csv")

def reduce_size_float(data):
  for col in data.columns:
    data[col] = data[col].astype(np.float16)
  return data

X_Data = reduce_size_float(X_Data)

X_train, X_test, y_train, y_test = train_test_split(X_Data, y_data, train_size=0.70, test_size=0.30, random_state=101)

X_train = X_train.iloc[: , 1:]
X_test = X_test.iloc[: , 1:]
y_train = y_train.iloc[: , 1:]
y_test = y_test.iloc[: , 1:]

print(X_train.shape, X_test.shape,y_train.shape,y_test.shape)

i = (X_train.shape[1:])
i

# Voting Ensemble for Classification
import pandas
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import VotingClassifier

lr = LogisticRegression()
dr = DecisionTreeClassifier()

knn = KNeighborsClassifier()

evc = VotingClassifier( estimators= [('lr',lr),('dt',dr),('knn',knn)], voting = 'hard')

evc.fit(X_train,y_train)

evc.score(X_test,y_test)