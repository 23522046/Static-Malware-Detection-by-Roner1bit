# -*- coding: utf-8 -*-
"""Data_dumper_and_non-eff_preproccessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19-9fWp0YPPUJFK8AdiX00WlzplEevP_l

# **From Drive**
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/MyDrive/Untitled folder/Static/BenignCSVs.zip"

!unzip "/content/drive/MyDrive/Untitled folder/Static/Malicious-CSVs.zip"

"""#Download The ZIPs"""

!gdown --id 1Bm2FJ6aVui7gRBpPPFXR3vj1AV5oRdHx
!gdown --id  1CZZ4Xx1UPnBgexppdzB2Iu-7YsbG9fLP

"""Unziping them"""

!unzip "/content/Malicious-CSVs.zip"
!unzip "/content/BenignCSVs.zip"

import numpy as np
import pandas as pd
import csv

oneTimer=True

for chunk in pd.read_csv("/content/FileInfector.csv",chunksize=1000,header=None):
  chunk['Label']='FileInfector'
  if oneTimer:
    chunk.to_csv("output.csv")
    oneTimer=False
  else:
    chunk.to_csv('output.csv', mode='a', header=None)

!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Adware.csv",chunksize=500,header=None):
  chunk['Label']='Adware'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Riskware.csv",chunksize=500,header=None):
  chunk['Label']='Riskware'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Trojan.csv",chunksize=500,header=None):
  chunk['Label']='Trojan'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Zeroday.csv",chunksize=500,header=None):
  chunk['Label']='Zeroday'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"
for chunk in pd.read_csv("/content/Backdoor.csv",chunksize=500,header=None):
  chunk['Label']='Backdoor'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Banker.csv",chunksize=500,header=None):
  chunk['Label']='Banker'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"
for chunk in pd.read_csv("/content/Dropper.csv",chunksize=500,header=None):
  chunk['Label']='Dropper'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"
for chunk in pd.read_csv("/content/NoCategory.csv",chunksize=500,header=None):
  chunk['Label']='NoCategory'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"
PUA=pd.read_csv("/content/PUA.csv",header=None)
for chunk in pd.read_csv("/content/PUA.csv",chunksize=500,header=None):
  chunk['Label']='PUA'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Ransomware.csv",chunksize=500,header=None):
  chunk['Label']='Ransomware'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"
for chunk in pd.read_csv("/content/SMS.csv",chunksize=500,header=None):
  chunk['Label']='SMS'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Scareware.csv",chunksize=500,header=None):
  chunk['Label']='Scareware'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

Spy=pd.read_csv("/content/Spy.csv",header=None)
for chunk in pd.read_csv("/content/Spy.csv",chunksize=500,header=None):
  chunk['Label']='Spy'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Trojan.csv",chunksize=500,header=None):
  chunk['Label']='Trojan'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"


for chunk in pd.read_csv("/content/Zeroday.csv",chunksize=500,header=None):
  chunk['Label']='Zeroday'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Ben0.csv",chunksize=500,header=None):
  chunk['Label']='Benign'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Ben1.csv",chunksize=500,header=None):
  chunk['Label']='Benign'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Ben2.csv",chunksize=500,header=None):
  chunk['Label']='Benign'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Ben3.csv",chunksize=500,header=None):
  chunk['Label']='Benign'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

for chunk in pd.read_csv("/content/Ben4.csv",chunksize=500,header=None):
  chunk['Label']='Benign'
  chunk.to_csv('output.csv', mode='a', header=None)
!cp output.csv "drive/My Drive/"

"""## **To get the Concatenated data Start Here**"""

!gdown --id 1WQki6G0bvmpfQ7xpX7W2_XpIoXrEM10y

import numpy
import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.preprocessing import LabelEncoder
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, BatchNormalization, Activation
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.callbacks import EarlyStopping,Callback
from time import time
from sklearn import metrics
import pickle

x=0
l=True
def Feature_Selection(X_Data, Y_Data):
 
    print(X_Data.shape)

    print("Feature Selection")
    global l
    if l:
      model = ExtraTreesClassifier(n_estimators=500, random_state=0, n_jobs=1, max_depth=25)
      l=False
    else:
      with open("model.sav", "rb") as f1:
        model = pickle.load(f1)
    global x    
    x+=1
    print(x)
    print(X_Data.index)
    model.fit(X_Data, Y_Data.values.ravel())
    importances = model.feature_importances_
    std = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)
    indices = np.argsort(importances)[::-1]
    # Print the feature ranking
    print("Feature ranking:")
    Best = []
    important = []
    for f in range(X_Data.shape[1]):
        if (importances[indices[f]] > 0.000001):
            Best.append(indices[f])
            #print("%d. Feature %d (%f)" % (f + 1, indices[f], importances[indices[f]]))
            important.append(importances[indices[f]])
    print(len(Best), Best)
    X_Data_Best = pd.DataFrame(columns=Best)
    filename = 'model.sav'
    pickle.dump(model, open(filename, 'wb'))
    
    #print(X_Data_Best.shape)
    for i in Best:
        X_Data_Best[i] = X_Data.iloc[:,int(i)]
    print(X_Data_Best.shape)
    X_Data_Best.to_csv('Feature.csv', mode='a', header=None)
    Y_Data.to_csv('Label.csv', mode='a', header=None)
    !cp Feature.csv "drive/My Drive/"
    !cp Label.csv "drive/My Drive/"
    !cp model.sav "drive/My Drive/"

dict={'Adware':0,'Banker':1 , 'FileInfector':2,'PUA':3,'Riskware':4,'SMS':5,'Trojan':6,'Backdoor':7,'Dropper':8,'NoCategory':9,'Ransomware':10, 'Scareware':11 ,'Spy':12 ,'Zeroday':13,'Benign':14}

def label_converting(data,dict):
  data[9505] = data.apply(lambda row : dict[row[9505]], axis = 1)
  #print(data.head())
  #for ind in data.index:
  #  label=data['Label'][ind]
  #  data['Label'][ind]=dict[label]
  return data

def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep].astype(np.float64)

!rm Feature.csv
!rm Label.csv
!rm model.sav

for Data in pd.read_csv("/content/output.csv",chunksize=10000,header=None):
  Data = Data.iloc[1: , :]
  #print(Data.head())
  Data=label_converting(Data,dict)
  #X_Data=Data.drop(columns=Data.columns[-1])
  #X_Data=X_Data.drop(columns=X_Data.columns[0:2])
  #Y_Data=Data.iloc[:,-1:]
  #lists = Data.columns.to_list()
  #lists_2 = Data.iloc[1,:]
  #print(len(lists))
  #print(len(lists_2))
  #print(Y_Data.head())
  Data=Data.drop(columns=Data.columns[0:2])
  Data=clean_dataset(Data)
  X_Data=Data.drop(columns=Data.columns[-1])
  Y_Data=Data.iloc[:,-1:]

  Feature_Selection(X_Data,Y_Data)

!cp Feature.csv "drive/My Drive/"
!cp Label.csv "drive/My Drive/"
!cp model.sav "drive/My Drive/"

"""DATA After feature Selection"""